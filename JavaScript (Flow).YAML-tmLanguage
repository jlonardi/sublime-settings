name: JavaScript (with React support)
scopeName: source.JavaScript
uuid: 805375ec-d614-41f5-8993-5843fe63ea82
fileTypes: [.js, .jsx, .es6, .mjs]
information_for_contributors: ['This file has been converted from https://github.com/Microsoft/TypeScript-TmLanguage/blob/master/TypeScriptReact.tmLanguage',
  'If you want to provide a fix or improvement, please create a pull request against
    the original repository.', 'Once accepted there, we are happy to receive an update
    request.']
patterns:
- {include: '#directives'}
- {include: '#statements'}
- captures:
    '1': {name: punctuation.definition.comment.ts}
  match: \A(#!).*(?=$)
  name: comment.line.shebang.ts
repository:
  access-modifier: {match: '(?<!\.|\$)\b(abstract|public|protected|private|readonly|static)\b(?!\$|\.)',
    name: storage.modifier.js}
  after-operator-block:
    begin: (?<=[=(,\[?+!]|await|return|yield|throw|in|of|typeof|&&|\|\||\*)\s*(\{)
    beginCaptures:
      '1': {name: punctuation.definition.block.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.block.js}
    name: meta.objectliteral.js
    patterns:
    - {include: '#object-member'}
  array-binding-pattern:
    begin: (?:(\.\.\.)\s*)?(\[)
    beginCaptures:
      '1': {name: keyword.operator.rest.js}
      '2': {name: punctuation.definition.binding-pattern.array.js}
    end: \]
    endCaptures:
      '0': {name: punctuation.definition.binding-pattern.array.js}
    patterns:
    - {include: '#binding-element'}
    - {include: '#punctuation-comma'}
  array-literal:
    begin: \[
    beginCaptures:
      '0': {name: meta.brace.square.js}
    end: \]
    endCaptures:
      '0': {name: meta.brace.square.js}
    name: meta.array.literal.js
    patterns:
    - {include: '#expression'}
    - {include: '#punctuation-comma'}
  arrow-function:
    patterns:
    - captures:
        '1': {name: storage.modifier.async.js}
        '2': {name: variable.parameter.js}
      match: (?:(?<!\.|\$)(\basync)\s+)?([_$[:alpha:]][_$[:alnum:]]*)\s*(?==>)
      name: meta.arrow.js
    - begin: "(?x) (?:\n  (?<!\\.|\\$)(\\basync)\n)? ((?<![})!\\]])\\s*\n  (?=\n \
        \   # sure shot arrow functions even if => is on new line\n    (\n      [(]\\\
        s*\n      (\n        ([)]\\s*:) |                                   # ():\n\
        \        ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:) # [(]param: |\
        \ [(]...param:\n      )\n    ) |\n    (\n      [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\\
        s+extends\\s*[^=>] # < typeparam extends \n    ) |\n    # arrow function possible\
        \ to detect only with => on same line\n    (\n      (<\\s*[_$[:alpha:]\\{\\\
        (]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\{\\(]([^=<>]|=[^<])+\\>)+>\\s*)?    \
        \             # typeparameters\n      \\(([^()]|\\([^()]*\\))*\\)        \
        \             # parameteres\n      (\\s*:\\s*(.)*)?                      \
        \        # return type\n      \\s*=>                                     \
        \  # arrow operator\n    )\n  )\n)"
      beginCaptures:
        '1': {name: storage.modifier.async.js}
      end: (?==>|\{|(^\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\s+))
      name: meta.arrow.js
      patterns:
      - {include: '#comment'}
      - {include: '#type-parameters'}
      - {include: '#function-parameters'}
      - {include: '#arrow-return-type'}
    - begin: =>
      beginCaptures:
        '0': {name: storage.type.function.arrow.js}
      end: (?<=\}|\S)(?<!=>)|((?!\{)(?=\S))
      name: meta.arrow.js
      patterns:
      - {include: '#decl-block'}
      - {include: '#expression'}
  arrow-return-type:
    begin: (?<=\))\s*(:)
    beginCaptures:
      '1': {name: keyword.operator.type.annotation.js}
    end: (?==>|\{|(^\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\s+))
    name: meta.return.type.arrow.js
    patterns:
    - begin: (?<=[:])(?=\s*\{)
      end: (?<=\})
      patterns:
      - {include: '#type-object'}
    - {include: '#type-predicate-operator'}
    - {include: '#type'}
  binding-element:
    patterns:
    - {include: '#comment'}
    - {include: '#object-binding-pattern'}
    - {include: '#array-binding-pattern'}
    - {include: '#destructuring-variable-rest'}
    - {include: '#variable-initializer'}
  boolean-literal:
    patterns:
    - {match: '(?<!\.|\$)\btrue\b(?!\$)', name: constant.language.boolean.true.js}
    - {match: '(?<!\.|\$)\bfalse\b(?!\$)', name: constant.language.boolean.false.js}
  brackets:
    patterns:
    - begin: '{'
      end: '}|(?=\*/)'
      patterns:
      - {include: '#brackets'}
    - begin: \[
      end: \]|(?=\*/)
      patterns:
      - {include: '#brackets'}
  case-clause:
    begin: (?<!\.|\$)\b(case|default(?=:))\b(?!\$|\.)
    beginCaptures:
      '1': {name: keyword.control.switch.js}
    end: ':'
    endCaptures:
      '0': {name: punctuation.definition.section.case-statement.js}
    name: case-clause.expr.js
    patterns:
    - {include: '#expression'}
  cast:
    patterns:
    - {include: '#jsx'}
  class-declaration:
    begin: (?<!\.|\$)\b(?:(export)\s+)?\b(?:(abstract)\s+)?\b(class)\b(?=\s+|/[/*])
    beginCaptures:
      '1': {name: keyword.control.export.js}
      '2': {name: storage.modifier.js}
      '3': {name: storage.type.class.js}
    end: (?<=\})
    name: meta.class.js
    patterns:
    - {include: '#class-declaration-or-expression-patterns'}
  class-declaration-or-expression-patterns:
    patterns:
    - {include: '#comment'}
    - {include: '#class-or-interface-heritage'}
    - captures:
        '0': {name: entity.name.type.class.js}
      match: '[_$[:alpha:]][_$[:alnum:]]*'
    - {include: '#type-parameters'}
    - {include: '#class-or-interface-body'}
  class-expression:
    begin: (?<!\.|\$)\b(class)\b(?=\s+|[<{]|/[/*])
    beginCaptures:
      '1': {name: storage.type.class.js}
    end: (?<=\})
    name: meta.class.js
    patterns:
    - {include: '#class-declaration-or-expression-patterns'}
  class-or-interface-body:
    begin: \{
    beginCaptures:
      '0': {name: punctuation.definition.block.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.block.js}
    patterns:
    - {include: '#string'}
    - {include: '#comment'}
    - {include: '#decorator'}
    - {include: '#method-declaration'}
    - {include: '#indexer-declaration'}
    - {include: '#field-declaration'}
    - {include: '#type-annotation'}
    - {include: '#variable-initializer'}
    - {include: '#access-modifier'}
    - {include: '#property-accessor'}
    - {include: '#after-operator-block'}
    - {include: '#decl-block'}
    - {include: '#expression'}
    - {include: '#punctuation-comma'}
    - {include: '#punctuation-semicolon'}
  class-or-interface-heritage:
    begin: (?<!\.|\$)(?:\b(extends|implements)\b)(?!\$|\.)
    beginCaptures:
      '1': {name: storage.modifier.js}
    end: (?=\{)
    endCaptures:
      '1': {name: punctuation.definition.block.js}
    patterns:
    - {include: '#comment'}
    - {include: '#class-or-interface-heritage'}
    - {include: '#type-parameters'}
    - captures:
        '1': {name: entity.name.type.module.js}
        '2': {name: punctuation.accessor.js}
      match: ([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)(?=\s*[_$[:alpha:]][_$[:alnum:]]*(\s*\.\s*[_$[:alpha:]][_$[:alnum:]]*)*\s*([,<{]|extends|implements|//|/\*))
    - captures:
        '1': {name: entity.other.inherited-class.js}
      match: ([_$[:alpha:]][_$[:alnum:]]*)(?=\s*([,<{]|extends|implements|//|/\*))
    - {include: '#expression'}
  comment:
    patterns:
    - begin: /\*\*(?!/)
      beginCaptures:
        '0': {name: punctuation.definition.comment.js}
      end: \*/
      endCaptures:
        '0': {name: punctuation.definition.comment.js}
      name: comment.block.documentation.js
      patterns:
      - {include: '#docblock'}
    - begin: (/\*)(?:\s*((@)internal)(?=\s|(\*/)))?
      beginCaptures:
        '1': {name: punctuation.definition.comment.js}
        '2': {name: storage.type.internaldeclaration.js}
        '3': {name: punctuation.decorator.internaldeclaration.js}
      end: \*/
      endCaptures:
        '0': {name: punctuation.definition.comment.js}
      name: comment.block.js
    - begin: (^[ \t]+)?((//)(?:\s*((@)internal)(?=\s|$))?)
      beginCaptures:
        '1': {name: punctuation.whitespace.comment.leading.js}
        '2': {name: comment.line.double-slash.js}
        '3': {name: punctuation.definition.comment.js}
        '4': {name: storage.type.internaldeclaration.js}
        '5': {name: punctuation.decorator.internaldeclaration.js}
      contentName: comment.line.double-slash.tsx
      end: (?=^)
  control-statement:
    patterns:
    - {match: '(?<!\.|\$)\b(catch|finally|throw|try)\b(?!\$|\.)', name: keyword.control.trycatch.js}
    - {match: '(?<!\.|\$)\b(break|continue|do|goto|while)\b(?!\$|\.)', name: keyword.control.loop.js}
    - {match: '(?<!\.|\$)\b(return)\b(?!\$|\.)', name: keyword.control.flow.js}
    - {match: '(?<!\.|\$)\b(case|default|switch)\b(?!\$|\.)', name: keyword.control.switch.js}
    - {match: '(?<!\.|\$)\b(else|if)\b(?!\$|\.)', name: keyword.control.conditional.js}
    - {match: '(?<!\.|\$)\b(with)\b(?!\$|\.)', name: keyword.control.with.js}
    - {match: '(?<!\.|\$)\b(debugger)\b(?!\$|\.)', name: keyword.other.debugger.js}
    - {match: '(?<!\.|\$)\b(declare)\b(?!\$|\.)', name: storage.modifier.js}
  decl-block:
    begin: \{
    beginCaptures:
      '0': {name: punctuation.definition.block.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.block.js}
    name: meta.block.js
    patterns:
    - {include: '#statements'}
  declaration:
    patterns:
    - {include: '#decorator'}
    - {include: '#var-expr'}
    - {include: '#function-declaration'}
    - {include: '#class-declaration'}
    - {include: '#interface-declaration'}
    - {include: '#type-declaration'}
    - {include: '#enum-declaration'}
    - {include: '#namespace-declaration'}
    - {include: '#import-equals-declaration'}
    - {include: '#import-declaration'}
    - {include: '#export-declaration'}
  decorator:
    begin: (?<!\.|\$)\@
    beginCaptures:
      '0': {name: punctuation.decorator.js}
    end: (?=\s)
    name: meta.decorator.js
    patterns:
    - {include: '#expression'}
  destructuring-parameter:
    patterns:
    - begin: (?<!=|:)\s*(\{)
      beginCaptures:
        '1': {name: punctuation.definition.binding-pattern.object.js}
      end: \}
      endCaptures:
        '0': {name: punctuation.definition.binding-pattern.object.js}
      name: meta.parameter.object-binding-pattern.js
      patterns:
      - {include: '#parameter-object-binding-element'}
    - begin: (?<!=|:)\s*(\[)
      beginCaptures:
        '1': {name: punctuation.definition.binding-pattern.array.js}
      end: \]
      endCaptures:
        '0': {name: punctuation.definition.binding-pattern.array.js}
      name: meta.paramter.array-binding-pattern.js
      patterns:
      - {include: '#parameter-binding-element'}
      - {include: '#punctuation-comma'}
  destructuring-parameter-rest:
    captures:
      '1': {name: keyword.operator.rest.js}
      '2': {name: variable.parameter.js}
    match: (?:(\.\.\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)
  destructuring-variable:
    patterns:
    - begin: (?<!=|:|of|in)\s*(?=\{)
      end: (?=$|^|[;,=}]|(\s+(of|in)\s+))
      name: meta.object-binding-pattern-variable.js
      patterns:
      - {include: '#object-binding-pattern'}
      - {include: '#type-annotation'}
      - {include: '#comment'}
    - begin: (?<!=|:|of|in)\s*(?=\[)
      end: (?=$|^|[;,=}]|(\s+(of|in)\s+))
      name: meta.array-binding-pattern-variable.js
      patterns:
      - {include: '#array-binding-pattern'}
      - {include: '#type-annotation'}
      - {include: '#comment'}
  destructuring-variable-rest:
    captures:
      '1': {name: keyword.operator.rest.js}
      '2': {name: meta.definition.variable.js variable.other.readwrite.js}
    match: (?:(\.\.\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)
  directives:
    begin: ^(///)\s*(?=<(reference|amd-dependency|amd-module)(\s+(path|types|no-default-lib|name)\s*=\s*((\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")))+\s*/>\s*$)
    beginCaptures:
      '1': {name: punctuation.definition.comment.js}
    end: (?=^)
    name: comment.line.triple-slash.directive.js
    patterns:
    - begin: (<)(reference|amd-dependency|amd-module)
      beginCaptures:
        '1': {name: punctuation.definition.tag.directive.js}
        '2': {name: entity.name.tag.directive.js}
      end: />
      endCaptures:
        '0': {name: punctuation.definition.tag.directive.js}
      name: meta.tag.js
      patterns:
      - {match: path|types|no-default-lib|name, name: entity.other.attribute-name.directive.js}
      - {match: '=', name: keyword.operator.assignment.js}
      - {include: '#string'}
  docblock:
    patterns:
    - captures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
        '3': {name: constant.language.access-type.jsdoc}
      match: '(?x)

        ((@)(?:access|api))

        \s+

        (private|protected|public)

        \b'
    - captures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
        '3': {name: entity.name.type.instance.jsdoc}
        '4': {name: punctuation.definition.bracket.angle.begin.jsdoc}
        '5': {name: constant.other.email.link.underline.jsdoc}
        '6': {name: punctuation.definition.bracket.angle.end.jsdoc}
      match: "(?x)\n((@)author)\n\\s+\n(\n  [^@\\s<>*/]\n  (?:[^@<>*/]|\\*[^/])*\n\
        )\n(?:\n  \\s*\n  (<)\n  ([^>\\s]+)\n  (>)\n)?"
    - captures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
        '3': {name: entity.name.type.instance.jsdoc}
        '4': {name: keyword.operator.control.jsdoc}
        '5': {name: entity.name.type.instance.jsdoc}
      match: '(?x)

        ((@)borrows) \s+

        ((?:[^@\s*/]|\*[^/])+)    # <that namepath>

        \s+ (as) \s+              # as

        ((?:[^@\s*/]|\*[^/])+)    # <this namepath>'
    - begin: ((@)example)\s+
      beginCaptures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
      end: (?=@|\*/)
      name: meta.example.jsdoc
      patterns:
      - {match: ^\s\*\s+}
      - begin: \G(<)caption(>)
        beginCaptures:
          '0': {name: entity.name.tag.inline.jsdoc}
          '1': {name: punctuation.definition.bracket.angle.begin.jsdoc}
          '2': {name: punctuation.definition.bracket.angle.end.jsdoc}
        contentName: constant.other.description.jsdoc
        end: (</)caption(>)|(?=\*/)
        endCaptures:
          '0': {name: entity.name.tag.inline.jsdoc}
          '1': {name: punctuation.definition.bracket.angle.begin.jsdoc}
          '2': {name: punctuation.definition.bracket.angle.end.jsdoc}
      - captures:
          '0': {name: source.embedded.js}
        match: '[^\s@*](?:[^*]|\*[^/])*'
    - captures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
        '3': {name: constant.language.symbol-type.jsdoc}
      match: (?x) ((@)kind) \s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef)
        \b
    - captures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
        '3': {name: variable.other.link.underline.jsdoc}
        '4': {name: entity.name.type.instance.jsdoc}
      match: "(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?!\n      # Avoid matching\
        \ bare URIs (also acceptable as links)\n      https?://\n      |\n      #\
        \ Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\\
        ]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\\
        b\n    )\n    # Matched namepath\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  #\
        \ JSDoc namepath\n  (\n    (?!https?://)\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n\
        )"
    - captures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
        '3': {name: variable.other.jsdoc}
        '4': {name: punctuation.delimiter.object.comma.jsdoc}
        '5': {name: variable.other.jsdoc}
      match: "(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(?:\n  ([A-Za-z_$]\
        \        # First character: non-numeric word character\n  [\\w$.\\[\\]]*)\
        \       # Rest of identifier\n  (?:                # Possible list of additional\
        \ identifiers\n    \\s* (,) \\s*\n    ([A-Za-z_$]\n    [\\w$.\\[\\]]*)\n \
        \ )*\n)"
    - captures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
        '3': {name: variable.other.jsdoc}
      match: "(?x)\n(\n  (@)\n  (?:arg|argument|const|constant|member|namespace|param|var)\n\
        )\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)"
    - begin: ((@)typedef)\s+(?={)
      beginCaptures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
      end: (?=\s|\*/|[^{}\[\]A-Za-z_$])
      patterns:
      - {include: '#jsdoctype'}
      - {match: '(?:[^@\s*/]|\*[^/])+', name: entity.name.type.instance.jsdoc}
    - begin: ((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\s+(?={)
      beginCaptures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
      end: (?=\s|\*/|[^{}\[\]A-Za-z_$])
      patterns:
      - {include: '#jsdoctype'}
      - {match: '([A-Za-z_$][\w$.\[\]]*)', name: variable.other.jsdoc}
      - begin: \[
        captures:
          '1': {name: punctuation.definition.optional-value.begin.bracket.square.jsdoc}
          '2': {name: keyword.operator.assignment.jsdoc}
          '3': {name: source.embedded.js}
          '4': {name: punctuation.definition.optional-value.end.bracket.square.jsdoc}
          '5': {name: invalid.illegal.syntax.jsdoc}
        end: \]|(?=\*/)
        match: "(?x)\n(\\[)\\s*\n[\\w$]+\n(?:\n  (?:\\[\\])?                     \
          \                   # Foo[ ].bar properties within an array\n  \\.     \
          \                                           # Foo.Bar namespaced parameter\n\
          \  [\\w$]+\n)*\n(?:\n  \\s*\n  (=)                                     \
          \           # [foo=bar] Default parameter value\n  \\s*\n  (\n    # The\
          \ inner regexes are to stop the match early at */ and to not stop at escaped\
          \ quotes\n    (?:\n      \"(?:(?:\\*(?!/))|(?:\\\\(?!\"))|[^*\\\\])*?\"\
          \ |  # [foo=\"bar\"] Double-quoted\n      '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\
          \\])*?' |  # [foo='bar'] Single-quoted\n      \\[ (?:(?:\\*(?!/))|[^*])*?\
          \ \\] |              # [foo=[1,2]] Array literal\n      (?:(?:\\*(?!/))|[^*])*?\
          \                        # Everything else\n    )*\n  )\n)?\n\\s*(?:(\\\
          ])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))"
        name: variable.other.jsdoc
        patterns:
        - captures:
            '1': {name: keyword.operator.assignment.jsdoc}
            '2': {name: source.embedded.js}
          match: (=)((?:[^\]*]|\*[^/])*)
        - {include: '#brackets'}
        - {include: '#quotes'}
    - begin: ((@)(?:define|enum|exception|implements|modifies|namespace|private|protected|returns?|suppress|throws|type))\s+(?={)
      beginCaptures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
      end: (?=\s|\*/|[^{}\[\]A-Za-z_$])
      patterns:
      - {include: '#jsdoctype'}
    - captures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
        '3': {name: entity.name.type.instance.jsdoc}
      match: "(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n\
        \  |extends|external|function|func|host|lends|listens|interface|memberof!?\n\
        \  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)\n)\n\\\
        s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)"
    - begin: ((@)(?:default(?:value)?|license|version))\s+(([''"]))
      beginCaptures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
        '3': {name: variable.other.jsdoc}
        '4': {name: punctuation.definition.string.begin.jsdoc}
      contentName: variable.other.jsdoc
      end: (\3)|(?=$|\*/)
      endCaptures:
        '0': {name: variable.other.jsdoc}
        '1': {name: punctuation.definition.string.end.jsdoc}
    - captures:
        '1': {name: storage.type.class.jsdoc}
        '2': {name: punctuation.definition.block.tag.jsdoc}
        '3': {name: variable.other.jsdoc}
      match: ((@)(?:default(?:value)?|license|tutorial|variation|version))\s+([^\s*]+)
    - captures:
        '1': {name: punctuation.definition.block.tag.jsdoc}
      match: (?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles
        |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright
        |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception
        |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func
        |function|global|host|ignore|implements|implicitCast|inherit[Dd]oc|inner|instance|interface
        |internal|kind|lends|license|listens|main|member|memberof!?|method|mixes|mixins?|modifies|module
        |name|namespace|noalias|nocollapse|nocompile|nosideeffects|override|overview|package|param|preserve
        |private|prop|property|protected|public|read[Oo]nly|record|require[ds]|returns?|see|since|static
        |struct|submodule|summary|suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted
        |uses|var|variation|version|virtual|writeOnce) \b
      name: storage.type.class.jsdoc
    - {include: '#inline-tags'}
  enum-declaration:
    begin: (?<!\.|\$)(?:(\bexport)\s+)?(?:\b(const)\s+)?\b(enum)\s+([_$[:alpha:]][_$[:alnum:]]*)
    beginCaptures:
      '1': {name: keyword.control.export.js}
      '2': {name: storage.modifier.js}
      '3': {name: storage.type.enum.js}
      '4': {name: entity.name.type.enum.js}
    end: (?<=\})
    name: meta.enum.declaration.js
    patterns:
    - {include: '#comment'}
    - begin: \{
      beginCaptures:
        '0': {name: punctuation.definition.block.js}
      end: \}
      endCaptures:
        '0': {name: punctuation.definition.block.js}
      patterns:
      - {include: '#comment'}
      - begin: ([_$[:alpha:]][_$[:alnum:]]*)
        beginCaptures:
          '0': {name: variable.other.enummember.js}
        end: (?=,|\}|$)
        patterns:
        - {include: '#comment'}
        - {include: '#variable-initializer'}
      - begin: (?=((\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\])))
        end: (?=,|\}|$)
        patterns:
        - {include: '#string'}
        - {include: '#array-literal'}
        - {include: '#comment'}
        - {include: '#variable-initializer'}
      - {include: '#punctuation-comma'}
  export-declaration:
    patterns:
    - captures:
        '1': {name: keyword.control.export.js}
        '2': {name: keyword.control.as.js}
        '3': {name: storage.type.namespace.js}
        '4': {name: entity.name.type.module.js}
      match: (?<!\.|\$)\b(export)\s+(as)\s+(namespace)\s+([_$[:alpha:]][_$[:alnum:]]*)
    - begin: (?<!\.|\$)\b(export)(?:(?:\s*(=))|(?:\s+(default)(?=\s+)))
      beginCaptures:
        '1': {name: keyword.control.export.js}
        '2': {name: keyword.operator.assignment.js}
        '3': {name: keyword.control.default.js}
      end: (?=;|$|\babstract\b|\basync\b|\bclass\b|\bconst\b|\bdeclare\b|\benum\b|\bexport\b|\bfunction\b|\bimport\b|\binterface\b|\blet\b|\bmodule\b|\bnamespace\b|\btype\b|\bvar\b)
      name: meta.export.default.js
      patterns:
      - {include: '#expression'}
    - begin: (?<!\.|\$)\b(export)(?!(\s*:)|(\$))\b
      beginCaptures:
        '0': {name: keyword.control.export.js}
      end: (?=;|$|\babstract\b|\basync\b|\bclass\b|\bconst\b|\bdeclare\b|\benum\b|\bexport\b|\bfunction\b|\bimport\b|\binterface\b|\blet\b|\bmodule\b|\bnamespace\b|\btype\b|\bvar\b)
      name: meta.export.js
      patterns:
      - {include: '#import-export-declaration'}
  expression:
    patterns:
    - {include: '#jsx'}
    - {include: '#string'}
    - {include: '#regex'}
    - {include: '#template'}
    - {include: '#comment'}
    - {include: '#function-expression'}
    - {include: '#class-expression'}
    - {include: '#arrow-function'}
    - {include: '#cast'}
    - {include: '#ternary-expression'}
    - {include: '#new-expr'}
    - {include: '#object-literal'}
    - {include: '#expression-operators'}
    - {include: '#function-call'}
    - {include: '#literal'}
    - {include: '#support-objects'}
    - {include: '#identifiers'}
    - {include: '#paren-expression'}
    - {include: '#punctuation-comma'}
    - {include: '#punctuation-accessor'}
  expression-operators:
    patterns:
    - {match: '(?<!\.|\$)\b(await)\b(?!\$|\.)', name: keyword.control.flow.js}
    - captures:
        '1': {name: keyword.control.flow.js}
        '2': {name: keyword.generator.asterisk.js}
      match: (?<!\.|\$)\b(yield)\b(?!\$|\.)(?:\s*(\*))?
    - {match: '(?<!\.|\$)\bdelete\b(?!\$|\.)', name: keyword.operator.expression.delete.js}
    - {match: '(?<!\.|\$)\bin\b(?!\$|\.)', name: keyword.operator.expression.in.js}
    - {match: '(?<!\.|\$)\bof\b(?!\$|\.)', name: keyword.operator.expression.of.js}
    - {match: '(?<!\.|\$)\binstanceof\b(?!\$|\.)', name: keyword.operator.expression.instanceof.js}
    - {match: '(?<!\.|\$)\bnew\b(?!\$|\.)', name: keyword.operator.new.js}
    - {include: '#typeof-operator'}
    - {match: '(?<!\.|\$)\bvoid\b(?!\$|\.)', name: keyword.operator.expression.void.js}
    - begin: (?<!\.|\$)\b(as)\s+
      beginCaptures:
        '1': {name: keyword.control.as.js}
      end: (?=$|^|[;,:})\]]|((?<!\.|\$)\b(as)\s+))
      patterns:
      - {include: '#type'}
    - {match: \.\.\., name: keyword.operator.spread.js}
    - {match: '\*=|(?<!\()/=|%=|\+=|\-=', name: keyword.operator.assignment.compound.js}
    - {match: \&=|\^=|<<=|>>=|>>>=|\|=, name: keyword.operator.assignment.compound.bitwise.js}
    - {match: <<|>>>|>>, name: keyword.operator.bitwise.shift.js}
    - {match: ===|!==|==|!=, name: keyword.operator.comparison.js}
    - {match: <=|>=|<>|<|>, name: keyword.operator.relational.js}
    - {match: \!|&&|\|\|, name: keyword.operator.logical.js}
    - {match: \&|~|\^|\|, name: keyword.operator.bitwise.js}
    - {match: \=, name: keyword.operator.assignment.js}
    - {match: --, name: keyword.operator.decrement.js}
    - {match: \+\+, name: keyword.operator.increment.js}
    - {match: '%|\*|/|-|\+', name: keyword.operator.arithmetic.js}
    - captures:
        '1': {name: keyword.operator.arithmetic.js}
      match: (?<=[_$[:alnum:])])\s*(/)(?![/*])
  field-declaration:
    begin: (?<!\()(?:(?<!\.|\$)\b(readonly)\s+)?(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\?\s*)?(=|:))
    beginCaptures:
      '1': {name: storage.modifier.js}
    end: (?=\}|;|,|$|(^(?!(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\?\s*)?(=|:))))|(?<=\})
    name: meta.field.declaration.js
    patterns:
    - {include: '#variable-initializer'}
    - begin: (?=((?:[_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\?\s*)?(=|:))
      end: (?=[};,=]|$|(^(?!(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\?\s*)?(=|:))))|(?<=\})
      patterns:
      - {include: '#type-annotation'}
      - {include: '#string'}
      - {include: '#array-literal'}
      - {include: '#comment'}
      - {match: "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=(\\?\\s*)?\\s*\n  (=\\s*(\n \
          \   ((async\\s+)?(\n      (function\\s*[(<*]) |\n      (function\\s+) |\n\
          \      ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n    )) |\n    ((async\\s*)?(\n\
          \      ([(]\\s*(([)]\\s*:)|([_$[:alpha:]][_$[:alnum:]]*\\s*:)|(\\.\\.\\\
          .) )) |\n      ([<]\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s*[^=>])|(\\\
          s*[,]))) |\n      ((<\\s*[_$[:alpha:]\\{\\(]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\\
          {\\(]([^=<>]|=[^<])+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\\
          s*=>)\n    ))\n  )) |\n  (:\\s*(\n    (<) |\n    ([(]\\s*(\n      ([)])\
          \ |\n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n\
          \        ([)]\\s*=>)\n      ))\n    ))\n  ))\n)", name: meta.definition.property.js
          entity.name.function.js}
      - {match: '[_$[:alpha:]][_$[:alnum:]]*', name: meta.definition.property.js variable.object.property.js}
      - {match: '\?', name: keyword.operator.optional.js}
  for-loop:
    begin: (?<!\.|\$)\b(for)(?:\s+(await))?\s*(\()
    beginCaptures:
      '1': {name: keyword.control.loop.js}
      '2': {name: keyword.control.loop.js}
      '3': {name: meta.brace.round.js}
    end: \)
    endCaptures:
      '0': {name: meta.brace.round.js}
    patterns:
    - {include: '#var-expr'}
    - {include: '#expression'}
    - {include: '#punctuation-semicolon'}
  function-call:
    begin: (?=(([_$[:alpha:]][_$[:alnum:]]*\s*\.\s*)*|(\.\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\s*(<\s*[_$[:alpha:]\{\(]([^<>=]|=[^<]|\<\s*[_$[:alpha:]\{\(]([^=<>]|=[^<])+\>)+>\s*)?\()
    end: (?<=\))(?!(([_$[:alpha:]][_$[:alnum:]]*\s*\.\s*)*|(\.\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\s*(<\s*[_$[:alpha:]\{\(]([^<>=]|=[^<]|\<\s*[_$[:alpha:]\{\(]([^=<>]|=[^<])+\>)+>\s*)?\()
    patterns:
    - begin: (?=(([_$[:alpha:]][_$[:alnum:]]*\s*\.\s*)*|(\.\s*)?)([_$[:alpha:]][_$[:alnum:]]*))
      end: (?=\s*(<\s*[_$[:alpha:]\{\(]([^<>=]|=[^<]|\<\s*[_$[:alpha:]\{\(]([^=<>]|=[^<])+\>)+>\s*)?\()
      name: meta.function-call.js
      patterns:
      - {include: '#literal'}
      - {include: '#support-objects'}
      - {include: '#object-identifiers'}
      - {include: '#punctuation-accessor'}
      - {match: '(?![\.\$])\bimport(?=\s*[\(]\s*[\"\''\`])', name: keyword.operator.expression.import.js}
      - {match: '([_$[:alpha:]][_$[:alnum:]]*)', name: entity.name.function.js}
    - {include: '#comment'}
    - begin: \<
      beginCaptures:
        '0': {name: punctuation.definition.typeparameters.begin.js}
      end: \>
      endCaptures:
        '0': {name: punctuation.definition.typeparameters.end.js}
      name: meta.type.parameters.js
      patterns:
      - {include: '#type'}
      - {include: '#punctuation-comma'}
    - {include: '#paren-expression'}
  function-declaration:
    begin: (?<!\.|\$)\b(?:(export)\s+)?(?:(async)\s+)?(function\b)(?:\s*(\*))?(?:(?:\s+|(?<=\*))([_$[:alpha:]][_$[:alnum:]]*))?\s*
    beginCaptures:
      '1': {name: keyword.control.export.js}
      '2': {name: storage.modifier.async.js}
      '3': {name: storage.type.function.js}
      '4': {name: keyword.generator.asterisk.js}
      '5': {name: meta.definition.function.js entity.name.function.js}
    end: (?=$|^|;)|(?<=\})
    name: meta.function.js
    patterns:
    - {include: '#comment'}
    - {include: '#type-parameters'}
    - {include: '#function-parameters'}
    - {include: '#return-type'}
    - {include: '#decl-block'}
  function-expression:
    begin: (?<!\.|\$)\b(?:(async)\s+)?(function\b)(?:\s*(\*))?(?:(?:\s+|(?<=\*))([_$[:alpha:]][_$[:alnum:]]*))?\s*
    beginCaptures:
      '1': {name: storage.modifier.async.js}
      '2': {name: storage.type.function.js}
      '3': {name: keyword.generator.asterisk.js}
      '4': {name: meta.definition.function.js entity.name.function.js}
    end: (?<=\})
    name: meta.function.expression.js
    patterns:
    - {include: '#comment'}
    - {include: '#type-parameters'}
    - {include: '#function-parameters'}
    - {include: '#return-type'}
    - {include: '#decl-block'}
  function-parameters:
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.parameters.begin.js}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.parameters.end.js}
    name: meta.parameters.js
    patterns:
    - {include: '#comment'}
    - {include: '#decorator'}
    - {include: '#destructuring-parameter'}
    - {include: '#parameter-name'}
    - {include: '#type-annotation'}
    - {include: '#variable-initializer'}
    - {match: ',', name: punctuation.separator.parameter.js}
  identifiers:
    patterns:
    - {include: '#object-identifiers'}
    - captures:
        '1': {name: punctuation.accessor.js}
        '2': {name: entity.name.function.js}
      match: "(?x)(?:(\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\\
        s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\\
        s*=>)\n  )) |\n  ((async\\s*)?(\n    ([(]\\s*(([)]\\s*:)|([_$[:alpha:]][_$[:alnum:]]*\\\
        s*:)|(\\.\\.\\.) )) |\n    ([<]\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\\
        s*[^=>])|(\\s*[,]))) |\n    ((<\\s*[_$[:alpha:]\\{\\(]([^<>=]|=[^<]|\\<\\\
        s*[_$[:alpha:]\\{\\(]([^=<>]|=[^<])+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\\
        )(\\s*:\\s*(.)*)?\\s*=>)\n  ))\n))"
    - captures:
        '1': {name: punctuation.accessor.js}
        '2': {name: variable.other.constant.property.js}
      match: (\.)\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])
    - captures:
        '1': {name: punctuation.accessor.js}
        '2': {name: variable.other.property.js}
      match: (\.)\s*([_$[:alpha:]][_$[:alnum:]]*)
    - {match: '([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])', name: variable.other.constant.js}
    - {match: '[_$[:alpha:]][_$[:alnum:]]*', name: variable.other.readwrite.js}
  import-declaration:
    begin: (?<!\.|\$)(?:(\bexport)\s+)?\b(import)(?!(\s*[:\(])|(\$|\.))\b
    beginCaptures:
      '1': {name: keyword.control.export.js}
      '2': {name: keyword.control.import.js}
    end: (?=;|$|^)
    name: meta.import.js
    patterns:
    - {include: '#import-export-declaration'}
  import-equals-declaration:
    patterns:
    - begin: (?<!\.|\$)(?:(\bexport)\s+)?\b(import)\s+([_$[:alpha:]][_$[:alnum:]]*)\s*(=)\s*(require)\s*(\()
      beginCaptures:
        '1': {name: keyword.control.export.js}
        '2': {name: keyword.control.import.js}
        '3': {name: variable.other.readwrite.alias.js}
        '4': {name: keyword.operator.assignment.js}
        '5': {name: keyword.control.require.js}
        '6': {name: meta.brace.round.js}
      end: \)
      endCaptures:
        '0': {name: meta.brace.round.js}
      name: meta.import-equals.external.js
      patterns:
      - {include: '#comment'}
      - {include: '#string'}
    - begin: (?<!\.|\$)(?:(\bexport)\s+)?\b(import)\s+([_$[:alpha:]][_$[:alnum:]]*)\s*(=)\s*(?!require\b)
      beginCaptures:
        '1': {name: keyword.control.export.js}
        '2': {name: keyword.control.import.js}
        '3': {name: variable.other.readwrite.alias.js}
        '4': {name: keyword.operator.assignment.js}
      end: (?=;|$|^)
      name: meta.import-equals.internal.js
      patterns:
      - {include: '#comment'}
      - captures:
          '1': {name: entity.name.type.module.js}
          '2': {name: punctuation.accessor.js}
        match: ([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)
      - {match: '([_$[:alpha:]][_$[:alnum:]]*)', name: variable.other.readwrite.js}
  import-export-block:
    begin: \{
    beginCaptures:
      '0': {name: punctuation.definition.block.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.block.js}
    name: meta.block.js
    patterns:
    - {include: '#import-export-clause'}
  import-export-clause:
    patterns:
    - {include: '#comment'}
    - captures:
        '1': {name: keyword.control.default.js}
        '2': {name: constant.language.import-export-all.js}
        '3': {name: variable.other.readwrite.js}
        '4': {name: keyword.control.as.js}
        '5': {name: invalid.illegal.js}
        '6': {name: variable.other.readwrite.alias.js}
      comment: (default|*|name) as alias
      match: "(?x) (?: \\b(default)\\b | (\\*) | ([_$[:alpha:]][_$[:alnum:]]*)) \\\
        s+ \n  (as) \\s+ (?: (\\b default \\b | \\*) | ([_$[:alpha:]][_$[:alnum:]]*))"
    - {include: '#punctuation-comma'}
    - {match: \*, name: constant.language.import-export-all.js}
    - {match: \b(default)\b, name: keyword.control.default.js}
    - {match: '([_$[:alpha:]][_$[:alnum:]]*)', name: variable.other.readwrite.alias.js}
  import-export-declaration:
    patterns:
    - {include: '#comment'}
    - {include: '#string'}
    - {include: '#import-export-block'}
    - {match: \bfrom\b, name: keyword.control.from.js}
    - {include: '#import-export-clause'}
  indexer-declaration:
    begin: (?:(?<!\.|\$)\b(readonly)\s*)?(\[)\s*([_$[:alpha:]][_$[:alnum:]]*)\s*(?=:)
    beginCaptures:
      '1': {name: storage.modifier.js}
      '2': {name: meta.brace.square.js}
      '3': {name: variable.parameter.js}
    end: (\])\s*(\?\s*)?|$
    endCaptures:
      '1': {name: meta.brace.square.js}
      '2': {name: keyword.operator.optional.js}
    name: meta.indexer.declaration.js
    patterns:
    - {include: '#type-annotation'}
  indexer-mapped-type-declaration:
    begin: (?:(?<!\.|\$)\b(readonly)\s*)?(\[)\s*([_$[:alpha:]][_$[:alnum:]]*)\s+(in)\s+
    beginCaptures:
      '1': {name: storage.modifier.js}
      '2': {name: meta.brace.square.js}
      '3': {name: entity.name.type.js}
      '4': {name: keyword.operator.expression.in.js}
    end: (\])\s*(\?\s*)?|$
    endCaptures:
      '1': {name: meta.brace.square.js}
      '2': {name: keyword.operator.optional.js}
    name: meta.indexer.mappedtype.declaration.js
    patterns:
    - {include: '#type'}
  inline-tags:
    patterns:
    - captures:
        '1': {name: punctuation.definition.bracket.square.begin.jsdoc}
        '2': {name: punctuation.definition.bracket.square.end.jsdoc}
      match: (\[)[^\]]+(\])(?={@(?:link|linkcode|linkplain|tutorial))
      name: constant.other.description.jsdoc
    - begin: ({)((@)(?:link(?:code|plain)?|tutorial))\s*
      beginCaptures:
        '1': {name: punctuation.definition.bracket.curly.begin.jsdoc}
        '2': {name: storage.type.class.jsdoc}
        '3': {name: punctuation.definition.inline.tag.jsdoc}
      end: '}|(?=\*/)'
      endCaptures:
        '0': {name: punctuation.definition.bracket.curly.end.jsdoc}
      name: entity.name.type.instance.jsdoc
      patterns:
      - captures:
          '1': {name: variable.other.link.underline.jsdoc}
          '2': {name: punctuation.separator.pipe.jsdoc}
        match: \G((?=https?://)(?:[^|}\s*]|\*[/])+)(\|)?
      - captures:
          '1': {name: variable.other.description.jsdoc}
          '2': {name: punctuation.separator.pipe.jsdoc}
        match: \G((?:[^{}@\s|*]|\*[^/])+)(\|)?
  interface-declaration:
    begin: (?<!\.|\$)\b(?:(export)\s+)?\b(?:(abstract)\s+)?\b(interface)\b(?=\s+|/[/*])
    beginCaptures:
      '1': {name: keyword.control.export.js}
      '2': {name: storage.modifier.js}
      '3': {name: storage.type.interface.js}
    end: (?<=\})
    name: meta.interface.js
    patterns:
    - {include: '#comment'}
    - {include: '#class-or-interface-heritage'}
    - captures:
        '0': {name: entity.name.type.interface.js}
      match: '[_$[:alpha:]][_$[:alnum:]]*'
    - {include: '#type-parameters'}
    - {include: '#class-or-interface-body'}
  jsdoctype:
    patterns:
    - {match: '\G{(?:[^}*]|\*[^/}])+$', name: invalid.illegal.type.jsdoc}
    - begin: \G({)
      beginCaptures:
        '0': {name: entity.name.type.instance.jsdoc}
        '1': {name: punctuation.definition.bracket.curly.begin.jsdoc}
      contentName: entity.name.type.instance.jsdoc
      end: ((}))\s*|(?=\*/)
      endCaptures:
        '1': {name: entity.name.type.instance.jsdoc}
        '2': {name: punctuation.definition.bracket.curly.end.jsdoc}
      patterns:
      - {include: '#brackets'}
  jsx:
    patterns:
    - {include: '#jsx-tag-without-attributes-in-expression'}
    - {include: '#jsx-tag-in-expression'}
    - {include: '#jsx-tag-invalid'}
  jsx-child-tag:
    begin: "(?x)\n  (?=(<)\\s*\n  ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\n  (?=\\s+(?!\\\
      ?)|/?>))"
    end: (/>)|(?:(</)\s*((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\w.]*))(?<!\.|-))\s*(>))
    endCaptures:
      '0': {name: meta.tag.js}
      '1': {name: punctuation.definition.tag.end.js}
      '2': {name: punctuation.definition.tag.begin.js}
      '3': {name: entity.name.tag.js}
      '4': {name: support.class.component.js}
      '5': {name: punctuation.definition.tag.end.js}
    patterns:
    - {include: '#jsx-tag'}
  jsx-children:
    patterns:
    - {include: '#jsx-tag-without-attributes'}
    - {include: '#jsx-child-tag'}
    - {include: '#jsx-tag-invalid'}
    - {include: '#jsx-evaluated-code'}
    - {include: '#jsx-entities'}
  jsx-entities:
    patterns:
    - captures:
        '1': {name: punctuation.definition.entity.js}
        '3': {name: punctuation.definition.entity.js}
      match: (&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)
      name: constant.character.entity.js
    - {match: '&', name: invalid.illegal.bad-ampersand.js}
  jsx-evaluated-code:
    begin: \{
    beginCaptures:
      '0': {name: punctuation.section.embedded.begin.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.section.embedded.end.js}
    name: meta.embedded.expression.js
    patterns:
    - {include: '#expression'}
  jsx-string-double-quoted:
    begin: '"'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.js}
    end: '"'
    endCaptures:
      '0': {name: punctuation.definition.string.end.js}
    name: string.quoted.double.js
    patterns:
    - {include: '#jsx-entities'}
  jsx-string-single-quoted:
    begin: ''''
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.js}
    end: ''''
    endCaptures:
      '0': {name: punctuation.definition.string.end.js}
    name: string.quoted.single.js
    patterns:
    - {include: '#jsx-entities'}
  jsx-tag:
    begin: "(?x)\n  (?=(<)\\s*\n  ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\n  (?=\\s+(?!\\\
      ?)|/?>))"
    end: (?=(/>)|(?:(</)\s*([_$a-zA-Z][-$\w.]*(?<!\.|-))\s*(>)))
    name: meta.tag.js
    patterns:
    - begin: "(?x)\n  (<)\\s*\n  ((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))\n\
        \  (?=\\s+(?!\\?)|/?>)"
      beginCaptures:
        '1': {name: punctuation.definition.tag.begin.js}
        '2': {name: entity.name.tag.js}
        '3': {name: support.class.component.js}
      end: (?=[/]?>)
      patterns:
      - {include: '#comment'}
      - {include: '#jsx-tag-attributes'}
      - {include: '#jsx-tag-attributes-illegal'}
    - begin: (>)
      beginCaptures:
        '1': {name: punctuation.definition.tag.end.js}
      contentName: meta.jsx.children.tsx
      end: (?=</)
      patterns:
      - {include: '#jsx-children'}
  jsx-tag-attribute-assignment: {match: '=(?=\s*(?:''|"|{|/\*|//|\n))', name: keyword.operator.assignment.js}
  jsx-tag-attribute-name:
    captures:
      '1': {name: entity.other.attribute-name.js}
    match: "(?x)\n  \\s*\n  ([_$a-zA-Z][-$\\w]*)\n  (?=\\s|=|/?>|/\\*|//)"
  jsx-tag-attributes:
    patterns:
    - {include: '#jsx-tag-attribute-name'}
    - {include: '#jsx-tag-attribute-assignment'}
    - {include: '#jsx-string-double-quoted'}
    - {include: '#jsx-string-single-quoted'}
    - {include: '#jsx-evaluated-code'}
  jsx-tag-attributes-illegal: {match: \S+, name: invalid.illegal.attribute.js}
  jsx-tag-in-expression:
    begin: "(?x)\n  (?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\Wreturn|^return|\\Wdefault|^)\\\
      s*\n  (?!<\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=>])|,)) # look\
      \ ahead is not type parameter of arrow\n  (?=(<)\\s*\n  ([_$a-zA-Z][-$\\w.]*(?<!\\\
      .|-))\n  (?=\\s+(?!\\?)|/?>))"
    end: (/>)|(?:(</)\s*((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\w.]*))(?<!\.|-))\s*(>))
    endCaptures:
      '0': {name: meta.tag.js}
      '1': {name: punctuation.definition.tag.end.js}
      '2': {name: punctuation.definition.tag.begin.js}
      '3': {name: entity.name.tag.js}
      '4': {name: support.class.component.js}
      '5': {name: punctuation.definition.tag.end.js}
    patterns:
    - {include: '#jsx-tag'}
  jsx-tag-invalid: {match: <\s*>, name: invalid.illegal.tag.incomplete.js}
  jsx-tag-without-attributes:
    begin: (<)\s*((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\w.]*))(?<!\.|-))\s*(>)
    beginCaptures:
      '1': {name: punctuation.definition.tag.begin.js}
      '2': {name: entity.name.tag.js}
      '3': {name: support.class.component.js}
      '4': {name: punctuation.definition.tag.end.js}
    contentName: meta.jsx.children.tsx
    end: (</)\s*((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\w.]*))(?<!\.|-))\s*(>)
    endCaptures:
      '1': {name: punctuation.definition.tag.begin.js}
      '2': {name: entity.name.tag.js}
      '3': {name: support.class.component.js}
      '4': {name: punctuation.definition.tag.end.js}
    name: meta.tag.without-attributes.js
    patterns:
    - {include: '#jsx-children'}
  jsx-tag-without-attributes-in-expression:
    begin: "(?x)\n  (?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\Wreturn|^return|\\Wdefault|^)\\\
      s*\n  (?=(<)\\s*((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))\\s*(>))"
    end: (?!\s*(<)\s*((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\w.]*))(?<!\.|-))\s*(>))
    patterns:
    - {include: '#jsx-tag-without-attributes'}
  literal:
    patterns:
    - {include: '#numeric-literal'}
    - {include: '#boolean-literal'}
    - {include: '#null-literal'}
    - {include: '#undefined-literal'}
    - {include: '#numericConstant-literal'}
    - {include: '#array-literal'}
    - {include: '#this-literal'}
    - {include: '#super-literal'}
  method-declaration:
    patterns:
    - begin: (?<!\.|\$)(?:\b(public|private|protected)\s+)?(?:\b(abstract)\s+)?(?:\b(async)\s+)?(?:\b(get|set)\s+)(?:(\*)\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))\s*[\(\<])
      beginCaptures:
        '1': {name: storage.modifier.js}
        '2': {name: storage.modifier.js}
        '3': {name: storage.modifier.async.js}
        '4': {name: storage.type.property.js}
        '5': {name: keyword.generator.asterisk.js}
      end: (?=\}|;|,|$)|(?<=\})
      name: meta.method.declaration.js
      patterns:
      - {include: '#method-declaration-name'}
      - {include: '#comment'}
      - {include: '#type-parameters'}
      - {include: '#function-parameters'}
      - {include: '#return-type'}
      - {include: '#decl-block'}
    - begin: (?<!\.|\$)(?:\b(public|private|protected)\s+)?(?:\b(abstract)\s+)?(?:\b(async)\s+)?(?:(?:\b(?:(new)|(constructor))\b(?!\$|\.|:))|(?:(\*)\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))?\s*[\(\<]))
      beginCaptures:
        '1': {name: storage.modifier.js}
        '2': {name: storage.modifier.js}
        '3': {name: storage.modifier.async.js}
        '4': {name: keyword.operator.new.js}
        '5': {name: storage.type.js}
        '6': {name: keyword.generator.asterisk.js}
      end: (?=\}|;|,|$)|(?<=\})
      name: meta.method.declaration.js
      patterns:
      - {include: '#method-declaration-name'}
      - {include: '#comment'}
      - {include: '#type-parameters'}
      - {include: '#function-parameters'}
      - {include: '#return-type'}
      - {include: '#decl-block'}
  method-declaration-name:
    begin: (?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??)\s*[\(\<])
    end: (?=\(|\<)
    patterns:
    - {include: '#string'}
    - {include: '#array-literal'}
    - {match: '[_$[:alpha:]][_$[:alnum:]]*', name: meta.definition.method.js entity.name.function.js}
    - {match: '\?', name: keyword.operator.optional.js}
  namespace-declaration:
    begin: (?<!\.|\$)(?:(\bexport)\s+)?\b(namespace|module)\s+(?=[_$[:alpha:]"'`])
    beginCaptures:
      '1': {name: keyword.control.export.js}
      '2': {name: storage.type.namespace.js}
    end: (?<=\})|(?=;|\babstract\b|\basync\b|\bclass\b|\bconst\b|\bdeclare\b|\benum\b|\bexport\b|\bfunction\b|\bimport\b|\binterface\b|\blet\b|\bmodule\b|\bnamespace\b|\btype\b|\bvar\b)
    name: meta.namespace.declaration.js
    patterns:
    - {include: '#comment'}
    - {include: '#string'}
    - {match: '([_$[:alpha:]][_$[:alnum:]]*)', name: entity.name.type.module.js}
    - {include: '#punctuation-accessor'}
    - {include: '#decl-block'}
  new-expr:
    begin: (?<!\.|\$)\b(new)\b(?!\$|\.)
    beginCaptures:
      '1': {name: keyword.operator.new.js}
    end: (?<=\))|(?=[;),}\]]|$|((?<!\.|\$)\bnew\b(?!\$|\.))|((?<!\.|\$)\bfunction((\s+[_$[:alpha:]][_$[:alnum:]]*)|(\s*[\(]))))
    name: new.expr.js
    patterns:
    - {include: '#paren-expression'}
    - {include: '#class-declaration'}
    - {include: '#type'}
  null-literal: {match: '(?<!\.|\$)\bnull\b(?!\$)', name: constant.language.null.js}
  numeric-literal:
    patterns:
    - {match: '\b(?<!\$)0(x|X)[0-9a-fA-F]+\b(?!\$)', name: constant.numeric.hex.js}
    - {match: '\b(?<!\$)0(b|B)[01]+\b(?!\$)', name: constant.numeric.binary.js}
    - {match: '\b(?<!\$)0(o|O)?[0-7]+\b(?!\$)', name: constant.numeric.octal.js}
    - captures:
        '0': {name: constant.numeric.decimal.js}
        '1': {name: meta.delimiter.decimal.period.js}
        '2': {name: meta.delimiter.decimal.period.js}
        '3': {name: meta.delimiter.decimal.period.js}
        '4': {name: meta.delimiter.decimal.period.js}
        '5': {name: meta.delimiter.decimal.period.js}
        '6': {name: meta.delimiter.decimal.period.js}
      match: "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n\
        \  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\\
        b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|            # 1E+3\n\
        \  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(\\.)\\\
        B)|                      # 1.\n  (?:\\B(\\.)[0-9]+\\b)|                  \
        \    # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)(?!\\$)"
  numericConstant-literal:
    patterns:
    - {match: '(?<!\.|\$)\bNaN\b(?!\$)', name: constant.language.nan.js}
    - {match: '(?<!\.|\$)\bInfinity\b(?!\$)', name: constant.language.infinity.js}
  object-binding-element:
    patterns:
    - {include: '#comment'}
    - begin: (?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))
      end: (?=,|\})
      patterns:
      - {include: '#object-binding-element-propertyName'}
      - {include: '#binding-element'}
    - {include: '#object-binding-pattern'}
    - {include: '#destructuring-variable-rest'}
    - {include: '#variable-initializer'}
    - {include: '#punctuation-comma'}
  object-binding-element-propertyName:
    begin: (?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))
    end: (:)
    endCaptures:
      '0': {name: punctuation.destructuring.js}
    patterns:
    - {include: '#string'}
    - {include: '#array-literal'}
    - {match: '([_$[:alpha:]][_$[:alnum:]]*)', name: variable.object.property.js}
  object-binding-pattern:
    begin: (?:(\.\.\.)\s*)?(\{)
    beginCaptures:
      '1': {name: keyword.operator.rest.js}
      '2': {name: punctuation.definition.binding-pattern.object.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.binding-pattern.object.js}
    patterns:
    - {include: '#object-binding-element'}
  object-identifiers:
    patterns:
    - {match: '([_$[:alpha:]][_$[:alnum:]]*)(?=\s*\.\s*prototype\b(?!\$))', name: support.class.js}
    - captures:
        '1': {name: punctuation.accessor.js}
        '2': {name: variable.other.constant.object.property.js}
        '3': {name: variable.other.object.property.js}
      match: "(?x)(\\.)\\s*(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n\
        )(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)"
    - captures:
        '1': {name: variable.other.constant.object.js}
        '2': {name: variable.other.object.js}
      match: "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n\
        )(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)"
  object-literal:
    begin: \{
    beginCaptures:
      '0': {name: punctuation.definition.block.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.block.js}
    name: meta.objectliteral.js
    patterns:
    - {include: '#object-member'}
  object-literal-method-declaration:
    begin: (?<!\.|\$)(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?:(\*)\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))\s*[\(\<])
    beginCaptures:
      '1': {name: storage.modifier.async.js}
      '2': {name: storage.type.property.js}
      '3': {name: keyword.generator.asterisk.js}
    end: (?=\}|;|,)|(?<=\})
    name: meta.method.declaration.js
    patterns:
    - {include: '#method-declaration-name'}
    - {include: '#comment'}
    - {include: '#type-parameters'}
    - {include: '#function-parameters'}
    - {include: '#return-type'}
    - {include: '#object-literal-method-overload-declaration'}
    - {include: '#decl-block'}
  object-literal-method-overload-declaration:
    begin: (?<!\.|\$)(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?:(\*)\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))\s*[\(\<])
    beginCaptures:
      '1': {name: storage.modifier.async.js}
      '2': {name: storage.type.property.js}
      '3': {name: keyword.generator.asterisk.js}
    end: (?=\(|\<)
    patterns:
    - {include: '#method-declaration-name'}
  object-member:
    patterns:
    - {include: '#comment'}
    - {include: '#object-literal-method-declaration'}
    - begin: (?=\[)
      end: (?=:)
      name: meta.object.member.js meta.object-literal.key.js
      patterns:
      - {include: '#array-literal'}
    - begin: (?=[\'\"])
      end: (?=:)
      name: meta.object.member.js meta.object-literal.key.js
      patterns:
      - {include: '#string'}
    - captures:
        '0': {name: meta.object-literal.key.js}
        '1': {name: constant.numeric.decimal.js}
      match: (?![_$[:alpha:]])([[:digit:]]+)\s*(?=:)
      name: meta.object.member.js
    - captures:
        '0': {name: meta.object-literal.key.js}
        '1': {name: entity.name.function.js}
      match: "(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:\\s*(\n  ((async\\s+)?(\n\
        \    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\\
        s*=>)\n  )) |\n  ((async\\s*)?(\n    ([(]\\s*(([)]\\s*:)|([_$[:alpha:]][_$[:alnum:]]*\\\
        s*:)|(\\.\\.\\.) )) |\n    ([<]\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\\
        s*[^=>])|(\\s*[,]))) |\n    ((<\\s*[_$[:alpha:]\\{\\(]([^<>=]|=[^<]|\\<\\\
        s*[_$[:alpha:]\\{\\(]([^=<>]|=[^<])+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\\
        )(\\s*:\\s*(.)*)?\\s*=>)\n  ))\n)))"
      name: meta.object.member.js
    - captures:
        '0': {name: meta.object-literal.key.js}
      match: (?:[_$[:alpha:]][_$[:alnum:]]*)\s*(?=:)
      name: meta.object.member.js
    - begin: \.\.\.
      beginCaptures:
        '0': {name: keyword.operator.spread.js}
      end: (?=,|\})
      name: meta.object.member.js
      patterns:
      - {include: '#expression'}
    - captures:
        '1': {name: variable.other.readwrite.js}
      match: ([_$[:alpha:]][_$[:alnum:]]*)\s*(?=,|\}|$)
      name: meta.object.member.js
    - begin: (?=[_$[:alpha:]][_$[:alnum:]]*\s*=)
      end: (?=,|\}|$)
      name: meta.object.member.js
      patterns:
      - {include: '#expression'}
    - {include: '#object-member-body'}
    - {include: '#punctuation-comma'}
  object-member-body:
    begin: ':'
    beginCaptures:
      '0': {name: meta.object-literal.key.js punctuation.separator.key-value.js}
    end: (?=,|\})
    name: meta.object.member.js
    patterns:
    - {include: '#expression'}
  parameter-array-binding-pattern:
    begin: (?:(\.\.\.)\s*)?(\[)
    beginCaptures:
      '1': {name: keyword.operator.rest.js}
      '2': {name: punctuation.definition.binding-pattern.array.js}
    end: \]
    endCaptures:
      '0': {name: punctuation.definition.binding-pattern.array.js}
    patterns:
    - {include: '#parameter-binding-element'}
    - {include: '#punctuation-comma'}
  parameter-binding-element:
    patterns:
    - {include: '#comment'}
    - {include: '#parameter-object-binding-pattern'}
    - {include: '#parameter-array-binding-pattern'}
    - {include: '#destructuring-parameter-rest'}
    - {include: '#variable-initializer'}
  parameter-name:
    patterns:
    - captures:
        '1': {name: storage.modifier.js}
      match: \s*\b(public|protected|private|readonly)(?=\s+(public|protected|private|readonly)\s+)
    - captures:
        '1': {name: storage.modifier.js}
        '2': {name: keyword.operator.rest.js}
        '3': {name: entity.name.function.js variable.language.this.js}
        '4': {name: entity.name.function.js}
        '5': {name: keyword.operator.optional.js}
      match: "(?x)(?:\\s*\\b(public|private|protected|readonly)\\s+)?(\\.\\.\\.)?\\\
        s*(?<!=|:)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*\n  (=\\\
        s*(\n    ((async\\s+)?(\n      (function\\s*[(<*]) |\n      (function\\s+)\
        \ |\n      ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n    )) |\n    ((async\\s*)?(\n\
        \      ([(]\\s*(([)]\\s*:)|([_$[:alpha:]][_$[:alnum:]]*\\s*:)|(\\.\\.\\.)\
        \ )) |\n      ([<]\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s*[^=>])|(\\\
        s*[,]))) |\n      ((<\\s*[_$[:alpha:]\\{\\(]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\\
        {\\(]([^=<>]|=[^<])+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\\
        s*=>)\n    ))\n  )) |\n  (:\\s*(\n    (<) |\n    ([(]\\s*(\n      ([)]) |\n\
        \      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n    \
        \    ([)]\\s*=>)\n      ))\n    ))\n  ))\n)"
    - captures:
        '1': {name: storage.modifier.js}
        '2': {name: keyword.operator.rest.js}
        '3': {name: variable.parameter.js variable.language.this.js}
        '4': {name: variable.parameter.js}
        '5': {name: keyword.operator.optional.js}
      match: (?:\s*\b(public|private|protected|readonly)\s+)?(\.\.\.)?\s*(?<!=|:)(?:((?<!\.|\$)\bthis\b(?!\.|\$))|([_$[:alpha:]][_$[:alnum:]]*))\s*(\??)
  parameter-object-binding-element:
    patterns:
    - {include: '#comment'}
    - begin: (?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))
      end: (?=,|\})
      patterns:
      - {include: '#object-binding-element-propertyName'}
      - {include: '#parameter-binding-element'}
    - {include: '#parameter-object-binding-pattern'}
    - {include: '#destructuring-parameter-rest'}
    - {include: '#variable-initializer'}
    - {include: '#punctuation-comma'}
  parameter-object-binding-pattern:
    begin: (?:(\.\.\.)\s*)?(\{)
    beginCaptures:
      '1': {name: keyword.operator.rest.js}
      '2': {name: punctuation.definition.binding-pattern.object.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.binding-pattern.object.js}
    patterns:
    - {include: '#parameter-object-binding-element'}
  paren-expression:
    begin: \(
    beginCaptures:
      '0': {name: meta.brace.round.js}
    end: \)
    endCaptures:
      '0': {name: meta.brace.round.js}
    patterns:
    - {include: '#expression'}
    - {include: '#punctuation-comma'}
  property-accessor: {match: '(?<!\.|\$)\b(get|set)\b(?!\$|\.)', name: storage.type.property.js}
  punctuation-accessor: {match: \., name: punctuation.accessor.js}
  punctuation-comma: {match: ',', name: punctuation.separator.comma.js}
  punctuation-semicolon: {match: ;, name: punctuation.terminator.statement.js}
  qstring-double:
    begin: '"'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.js}
    end: (")|((?:[^\\\n])$)
    endCaptures:
      '1': {name: punctuation.definition.string.end.js}
      '2': {name: invalid.illegal.newline.js}
    name: string.quoted.double.js
    patterns:
    - {include: '#string-character-escape'}
  qstring-single:
    begin: ''''
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.js}
    end: (\')|((?:[^\\\n])$)
    endCaptures:
      '1': {name: punctuation.definition.string.end.js}
      '2': {name: invalid.illegal.newline.js}
    name: string.quoted.single.js
    patterns:
    - {include: '#string-character-escape'}
  quotes:
    patterns:
    - begin: ''''
      end: '''|(?=\*/)'
      patterns:
      - {include: '#quotes'}
    - begin: '"'
      end: '"|(?=\*/)'
      patterns:
      - {include: '#quotes'}
  regex:
    patterns:
    - begin: (?<=[=(:,\[?+!]|return|case|=>|&&|\|\||\*\/)\s*(\/)(?![\/*])(?=(?:[^\/\\\[]|\\.|\[([^\]\\]|\\.)+\])+\/(?![\/*])[gimuy]*(?!\s*[a-zA-Z0-9_$]))
      beginCaptures:
        '1': {name: punctuation.definition.string.begin.js}
      end: (/)([gimuy]*)
      endCaptures:
        '1': {name: punctuation.definition.string.end.js}
        '2': {name: keyword.other.js}
      name: string.regexp.js
      patterns:
      - {include: '#regexp'}
    - begin: (?<![_$[:alnum:])])\/(?![\/*])(?=(?:[^\/\\\[]|\\.|\[([^\]\\]|\\.)+\])+\/(?![\/*])[gimuy]*(?!\s*[a-zA-Z0-9_$]))
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.js}
      end: (/)([gimuy]*)
      endCaptures:
        '1': {name: punctuation.definition.string.end.js}
        '2': {name: keyword.other.js}
      name: string.regexp.js
      patterns:
      - {include: '#regexp'}
  regex-character-class:
    patterns:
    - {match: '\\[wWsSdDtrnvf]|\.', name: constant.other.character-class.regexp}
    - {match: '\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})', name: constant.character.numeric.regexp}
    - {match: '\\c[A-Z]', name: constant.character.control.regexp}
    - {match: \\., name: constant.character.escape.backslash.regexp}
  regexp:
    patterns:
    - {match: '\\[bB]|\^|\$', name: keyword.control.anchor.regexp}
    - {match: '\\[1-9]\d*', name: keyword.other.back-reference.regexp}
    - {match: '[?+*]|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??', name: keyword.operator.quantifier.regexp}
    - {match: \|, name: keyword.operator.or.regexp}
    - begin: (\()((\?=)|(\?!))
      beginCaptures:
        '1': {name: punctuation.definition.group.regexp}
        '2': {name: punctuation.definition.group.assertion.regexp}
        '3': {name: meta.assertion.look-ahead.regexp}
        '4': {name: meta.assertion.negative-look-ahead.regexp}
      end: (\))
      endCaptures:
        '1': {name: punctuation.definition.group.regexp}
      name: meta.group.assertion.regexp
      patterns:
      - {include: '#regexp'}
    - begin: \((\?:)?
      beginCaptures:
        '0': {name: punctuation.definition.group.regexp}
        '1': {name: punctuation.definition.group.capture.regexp}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.group.regexp}
      name: meta.group.regexp
      patterns:
      - {include: '#regexp'}
    - begin: (\[)(\^)?
      beginCaptures:
        '1': {name: punctuation.definition.character-class.regexp}
        '2': {name: keyword.operator.negation.regexp}
      end: (\])
      endCaptures:
        '1': {name: punctuation.definition.character-class.regexp}
      name: constant.other.character-class.set.regexp
      patterns:
      - captures:
          '1': {name: constant.character.numeric.regexp}
          '2': {name: constant.character.control.regexp}
          '3': {name: constant.character.escape.backslash.regexp}
          '4': {name: constant.character.numeric.regexp}
          '5': {name: constant.character.control.regexp}
          '6': {name: constant.character.escape.backslash.regexp}
        match: (?:.|(\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\c[A-Z])|(\\.))\-(?:[^\]\\]|(\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\c[A-Z])|(\\.))
        name: constant.other.character-class.range.regexp
      - {include: '#regex-character-class'}
    - {include: '#regex-character-class'}
  return-type:
    patterns:
    - begin: (?<=\))\s*(:)(?=\s*\S)
      beginCaptures:
        '1': {name: keyword.operator.type.annotation.js}
      end: (?<![:|&])(?=$|^|[{};,]|//)
      name: meta.return.type.js
      patterns:
      - {include: '#return-type-core'}
    - begin: (?<=\))\s*(:)
      beginCaptures:
        '1': {name: keyword.operator.type.annotation.js}
      end: (?<![:|&])((?=[{};,]|//|^\s*$)|((?<=\S)(?=\s*$)))
      name: meta.return.type.js
      patterns:
      - {include: '#return-type-core'}
  return-type-core:
    patterns:
    - {include: '#comment'}
    - begin: (?<=[:|&])(?=\s*\{)
      end: (?<=\})
      patterns:
      - {include: '#type-object'}
    - {include: '#type-predicate-operator'}
    - {include: '#type'}
  statements:
    patterns:
    - {include: '#string'}
    - {include: '#template'}
    - {include: '#comment'}
    - {include: '#declaration'}
    - {include: '#switch-statement'}
    - {include: '#for-loop'}
    - {include: '#after-operator-block'}
    - {include: '#decl-block'}
    - {include: '#control-statement'}
    - {include: '#expression'}
    - {include: '#punctuation-semicolon'}
  string:
    patterns:
    - {include: '#qstring-single'}
    - {include: '#qstring-double'}
  string-character-escape: {match: '\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)',
    name: constant.character.escape.js}
  super-literal: {match: '(?<!\.|\$)\bsuper\b(?!\$)', name: variable.language.super.js}
  support-objects:
    patterns:
    - {match: '(?<!\.|\$)\b(arguments)\b(?!\$)', name: variable.language.arguments.js}
    - {match: "(?x)(?<!\\.|\\$)\\b(Array|ArrayBuffer|Atomics|Boolean|DataView|Date|Float32Array|Float64Array|Function|Generator\n\
        \  |GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Promise|Proxy\n\
        \  |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray\n \
        \ |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\\\
        b(?!\\$)", name: support.class.builtin.js}
    - {match: '(?<!\.|\$)\b((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\b(?!\$)',
      name: support.class.error.js}
    - {match: "(?x)(?<!\\.|\\$)\\b(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|\n\
        \  isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\\\
        s*\\() ", name: support.function.js}
    - captures:
        '1': {name: support.constant.math.js}
        '2': {name: punctuation.accessor.js}
        '3': {name: support.function.math.js}
        '4': {name: support.constant.property.math.js}
      match: "(?x)(?<!\\.|\\$)\\b(Math)(?:\\s*(\\.)\\s*(?:\n  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|\n\
        \  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|\n\
        \  round|sign|sin|sinh|sqrt|tan|tanh|trunc)\n  |\n  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\\\
        b(?!\\$)"
    - captures:
        '1': {name: support.class.console.js}
        '2': {name: punctuation.accessor.js}
        '3': {name: support.function.console.js}
      match: "(?x)(?<!\\.|\\$)\\b(console)(?:\\s*(\\.)\\s*(\n  assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log\n\
        \  |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\\b(?!\\\
        $)"
    - captures:
        '1': {name: support.constant.json.js}
        '2': {name: punctuation.accessor.js}
        '3': {name: support.function.json.js}
      match: (?<!\.|\$)\b(JSON)(?:\s*(\.)\s*(parse|stringify))?\b(?!\$)
    - captures:
        '1': {name: punctuation.accessor.js}
        '2': {name: support.variable.property.js}
        '3': {name: support.constant.js}
      match: "(?x) (\\.) \\s* (?:\n  (constructor|length|prototype|__proto__) \n \
        \ |\n  (EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY))\\\
        b(?!\\$)"
    - captures:
        '1': {name: support.variable.dom.js}
        '2': {name: support.class.dom.js}
      match: "(?x) (?<!\\.|\\$) \\b (?:\n  (document|event|navigator|performance|screen|window)\
        \ \n  |\n  (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener\n\
        \  |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule\n\
        \  |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration\n\
        \  |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern\n\
        \  |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent\n\
        \  |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException\n\
        \  |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer\n\
        \  |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry\n\
        \  |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent\n\
        \  |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential\n\
        \  |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync\n\
        \  |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement\n\
        \  |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement\n\
        \  |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement\n\
        \  |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement\n\
        \  |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement\n\
        \  |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement\n\
        \  |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement\n\
        \  |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement\n\
        \  |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement\n\
        \  |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement\n\
        \  |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement\n\
        \  |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase\n\
        \  |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction\n\
        \  |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities\n\
        \  |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess\n\
        \  |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent\n\
        \  |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream\n\
        \  |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent\n\
        \  |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID\n\
        \  |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification\n\
        \  |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential\n\
        \  |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark\n\
        \  |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList\n\
        \  |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent\n\
        \  |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList\n\
        \  |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager\n\
        \  |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource\n\
        \  |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement\n\
        \  |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength\n\
        \  |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio\n\
        \  |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement\n\
        \  |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement\n\
        \  |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement\n\
        \  |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength\n\
        \  |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement\n\
        \  |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio\n\
        \  |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList\n\
        \  |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement\n\
        \  |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement\n\
        \  |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState\n\
        \  |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet\n\
        \  |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable\n\
        \  |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer\n\
        \  |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat\n\
        \  |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES\n\
        \  |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope\n\
        \  |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult\n\
        \  |XSLTProcessor))\\b(?!\\$)"
    - captures:
        '1': {name: punctuation.accessor.js}
        '2': {name: support.constant.dom.js}
        '3': {name: support.variable.property.dom.js}
      match: "(?x) (\\.) \\s* (?:\n  (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE\n\
        \  |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR\n\
        \  |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR\n\
        \  |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)\n\
        \  |\n  (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName\n\
        \  |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop\n\
        \  |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor\n\
        \  |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption\n\
        \  |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear\n\
        \  |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete\n\
        \  |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset\n\
        \  |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight\n\
        \  |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds\n\
        \  |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize\n\
        \  |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host\n\
        \  |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth\n\
        \  |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext\n\
        \  |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom\n\
        \  |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple\n\
        \  |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName\n\
        \  |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight\n\
        \  |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer\n\
        \  |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling\n\
        \  |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText\n\
        \  |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts\n\
        \  |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove\n\
        \  |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary\n\
        \  |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead\n\
        \  |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile\n\
        \  |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\\\
        b(?!\\$|\\s*(<\\s*[_$[:alpha:]\\{\\(]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\{\\\
        (]([^=<>]|=[^<])+\\>)+>\\s*)?\\()"
    - {match: "(?x)(?<!\\.|\\$)\\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream\n\
        \  |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\\b(?!\\$)",
      name: support.class.node.js}
    - captures:
        '1': {name: support.variable.object.process.js}
        '2': {name: punctuation.accessor.js}
        '3': {name: support.variable.property.process.js}
        '4': {name: support.function.process.js}
      match: "(?x)(?<!\\.|\\$)\\b(process)(?:(\\.)(?:\n  (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)\n\
        \  |\n  (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)\n\
        ))?\\b(?!\\$)"
    - captures:
        '1': {name: support.type.object.module.js}
        '2': {name: support.type.object.module.js}
        '3': {name: punctuation.accessor.js}
        '4': {name: support.type.object.module.js}
      match: (?<!\.|\$)\b(?:(exports)|(module)(?:(\.)(exports|id|filename|loaded|parent|children))?)\b(?!\$)
    - {match: '(?<!\.|\$)\b(global|GLOBAL|root|__dirname|__filename)\b(?!\$)', name: support.variable.object.node.js}
    - captures:
        '1': {name: punctuation.accessor.js}
        '2': {name: support.function.event-handler.js}
        '3': {name: support.function.js}
        '4': {name: support.function.dom.js}
      match: "(?x) (\\.) \\s* \n(?:\n (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\n\
        \   Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\n   Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|\n\
        \   Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\n\
        \   Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\n\
        \   Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\n\
        \   Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\n\
        \   Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\n\
        \ ) |\n (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\n\
        \   scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\n\
        \   sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|\n\
        \   Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\n\
        \   Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\n\
        \   savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\n\
        \   contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\n\
        \   createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\n\
        \   test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\n\
        \   untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|\n\
        \   print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\n\
        \   fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\n\
        \   forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\n\
        \   abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\n\
        \   releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\n\
        \   Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\n\
        \   Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\n\
        \   moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back\n\
        \ ) |\n (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\n\
        \   appendChild|appendData|before|blur|canPlayType|captureStream|\n   caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\n\
        \   cloneContents|cloneNode|cloneRange|close|closest|collapse|\n   compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\n\
        \   convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\n\
        \   createAttributeNS|createCaption|createCDATASection|createComment|\n  \
        \ createContextualFragment|createDocument|createDocumentFragment|\n   createDocumentType|createElement|createElementNS|createEntityReference|\n\
        \   createEvent|createExpression|createHTMLDocument|createNodeIterator|\n\
        \   createNSResolver|createProcessingInstruction|createRange|createShadowRoot|\n\
        \   createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\n\
        \   deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\n\
        \   deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\n\
        \   enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\n\
        \   exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\n\
        \   getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\n\
        \   getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\n\
        \   getClientRects|getContext|getDestinationInsertionPoints|getElementById|\n\
        \   getElementsByClassName|getElementsByName|getElementsByTagName|\n   getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\n\
        \   getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\n\
        \   hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\n\
        \   insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\n\
        \   insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\n\
        \   isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\n\
        \   lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\n\
        \   moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\n\
        \   parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\n\
        \   previousSibling|probablySupportsContext|queryCommandEnabled|\n   queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\n\
        \   querySelector|querySelectorAll|registerContentHandler|registerElement|\n\
        \   registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\n\
        \   removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|\n\
        \   removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\n\
        \   requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\n\
        \   scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\n\
        \   setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\n   setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\n\
        \   setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\n\
        \   slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\n\
        \   submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\n\
        \   toDataURL|toggle|toString|values|write|writeln\n )\n)(?=\\s*\\()"
  switch-block:
    begin: \{
    beginCaptures:
      '0': {name: punctuation.definition.block.js}
    end: (?=\})
    name: switch-block.expr.js
    patterns:
    - {include: '#case-clause'}
    - {include: '#statements'}
  switch-expression:
    begin: (?<!\.|\$)\b(switch)\s*(\()
    beginCaptures:
      '1': {name: keyword.control.switch.js}
      '2': {name: meta.brace.round.js}
    end: \)
    endCaptures:
      '0': {name: meta.brace.round.js}
    name: switch-expression.expr.js
    patterns:
    - {include: '#expression'}
  switch-statement:
    begin: (?<!\.|\$)(?=\bswitch\s*\()
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.block.js}
    name: switch-statement.expr.js
    patterns:
    - {include: '#switch-expression'}
    - {include: '#switch-block'}
  template:
    begin: ([_$[:alpha:]][_$[:alnum:]]*)?(`)
    beginCaptures:
      '1': {name: entity.name.function.tagged-template.js}
      '2': {name: punctuation.definition.string.template.begin.js}
    end: '`'
    endCaptures:
      '0': {name: punctuation.definition.string.template.end.js}
    name: string.template.js
    patterns:
    - {include: '#template-substitution-element'}
    - {include: '#string-character-escape'}
  template-substitution-element:
    begin: \$\{
    beginCaptures:
      '0': {name: punctuation.definition.template-expression.begin.js}
    contentName: meta.embedded.line.tsx
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.template-expression.end.js}
    name: meta.template.expression.js
    patterns:
    - {include: '#expression'}
  ternary-expression:
    begin: (\?)
    beginCaptures:
      '0': {name: keyword.operator.ternary.js}
    end: (:)
    endCaptures:
      '0': {name: keyword.operator.ternary.js}
    patterns:
    - {include: '#expression'}
  this-literal: {match: '(?<!\$)((?<=\.\.\.)|(?<!\.))\bthis\b(?!\$)', name: variable.language.this.js}
  type:
    patterns:
    - {include: '#comment'}
    - {include: '#string'}
    - {include: '#numeric-literal'}
    - {include: '#type-primitive'}
    - {include: '#type-builtin-literals'}
    - {include: '#type-parameters'}
    - {include: '#type-tuple'}
    - {include: '#type-object'}
    - {include: '#type-operators'}
    - {include: '#type-fn-type-parameters'}
    - {include: '#type-paren-or-function-parameters'}
    - {include: '#type-function-return-type'}
    - {include: '#type-name'}
  type-annotation:
    patterns:
    - begin: (:)(?=\s*\S)
      beginCaptures:
        '1': {name: keyword.operator.type.annotation.js}
      end: (?<![:|&])((?=$|^|[,);\}\]]|//)|(?==[^>])|((?<=[\}>\]\)]|[_$[:alpha:]])\s*(?=\{)))
      name: meta.type.annotation.js
      patterns:
      - {include: '#type'}
    - begin: (:)
      beginCaptures:
        '1': {name: keyword.operator.type.annotation.js}
      end: (?<![:|&])((?=[,);\}\]]|//)|(?==[^>])|(?=^\s*$)|((?<=\S)(?=\s*$))|((?<=[\}>\]\)]|[_$[:alpha:]])\s*(?=\{)))
      name: meta.type.annotation.js
      patterns:
      - {include: '#type'}
  type-builtin-literals: {match: '(?<!\.|\$)\b(this|true|false|undefined|null|object)\b(?!\$|\.)',
    name: support.type.builtin.js}
  type-declaration:
    begin: (?<!\.|\$)(?:(\bexport)\s+)?\b(type)\b\s+([_$[:alpha:]][_$[:alnum:]]*)\s*
    beginCaptures:
      '1': {name: keyword.control.export.js}
      '2': {name: storage.type.type.js}
      '3': {name: entity.name.type.alias.js}
    end: (?=[};]|\babstract\b|\basync\b|\bclass\b|\bconst\b|\bdeclare\b|\benum\b|\bexport\b|\bfunction\b|\bimport\b|\binterface\b|\blet\b|\bmodule\b|\bnamespace\b|\btype\b|\bvar\b)
    name: meta.type.declaration.js
    patterns:
    - {include: '#comment'}
    - {include: '#type-parameters'}
    - {include: '#type'}
    - captures:
        '1': {name: keyword.operator.assignment.js}
      match: (=)\s*
  type-fn-type-parameters:
    patterns:
    - captures:
        '1': {name: keyword.control.new.js}
      match: (?<!\.|\$)\b(new)\b(?=\s*\<)
      name: meta.type.constructor.js
    - begin: (?<!\.|\$)\b(new)\b\s*(?=\()
      beginCaptures:
        '1': {name: keyword.control.new.js}
      end: (?<=\))
      name: meta.type.constructor.js
      patterns:
      - {include: '#function-parameters'}
    - begin: "(?x)(\n  (?=\n    [(]\\s*(\n      ([)]) | \n      (\\.\\.\\.) |\n  \
        \    ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n        ([)]\\s*=>)\n      ))\n\
        \    )\n  )\n)"
      end: (?<=\))
      name: meta.type.function.js
      patterns:
      - {include: '#function-parameters'}
  type-function-return-type:
    patterns:
    - begin: (=>)(?=\s*\S)
      beginCaptures:
        '1': {name: storage.type.function.arrow.js}
      end: (?<!=>)(?<![|&])(?=[,\]\)\{\}=;>]|//|$)
      name: meta.type.function.return.js
      patterns:
      - {include: '#type-function-return-type-core'}
    - begin: =>
      beginCaptures:
        '0': {name: storage.type.function.arrow.js}
      end: (?<!=>)(?<![|&])((?=[,\]\)\{\}=;>]|//|^\s*$)|((?<=\S)(?=\s*$)))
      name: meta.type.function.return.js
      patterns:
      - {include: '#type-function-return-type-core'}
  type-function-return-type-core:
    patterns:
    - {include: '#comment'}
    - begin: (?<==>)(?=\s*\{)
      end: (?<=\})
      patterns:
      - {include: '#type-object'}
    - {include: '#type-predicate-operator'}
    - {include: '#type'}
  type-name:
    patterns:
    - captures:
        '1': {name: entity.name.type.module.js}
        '2': {name: punctuation.accessor.js}
      match: ([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)
    - {match: '[_$[:alpha:]][_$[:alnum:]]*', name: entity.name.type.js}
  type-object:
    begin: \{
    beginCaptures:
      '0': {name: punctuation.definition.block.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.block.js}
    name: meta.object.type.js
    patterns:
    - {include: '#comment'}
    - {include: '#method-declaration'}
    - {include: '#indexer-declaration'}
    - {include: '#indexer-mapped-type-declaration'}
    - {include: '#field-declaration'}
    - {include: '#type-annotation'}
    - begin: \.\.\.
      beginCaptures:
        '0': {name: keyword.operator.spread.js}
      end: (?=\}|;|,|$)|(?<=\})
      patterns:
      - {include: '#type'}
    - {include: '#punctuation-comma'}
    - {include: '#punctuation-semicolon'}
    - {include: '#type'}
  type-operators:
    patterns:
    - {include: '#typeof-operator'}
    - begin: ([&|])(?=\s*\{)
      beginCaptures:
        '0': {name: keyword.operator.type.js}
      end: (?<=\})
      patterns:
      - {include: '#type-object'}
    - begin: '[&|]'
      beginCaptures:
        '0': {name: keyword.operator.type.js}
      end: (?=\S)
    - {match: '(?<!\.|\$)\bkeyof\b(?!\$|\.)', name: keyword.operator.expression.keyof.js}
  type-parameters:
    begin: (<)
    beginCaptures:
      '1': {name: punctuation.definition.typeparameters.begin.js}
    end: (>)
    endCaptures:
      '1': {name: punctuation.definition.typeparameters.end.js}
    name: meta.type.parameters.js
    patterns:
    - {include: '#comment'}
    - {match: '(?<!\.|\$)\b(extends)\b(?!\$)', name: storage.modifier.js}
    - {match: '\=(?!>)', name: keyword.operator.assignment.js}
    - {include: '#type'}
    - {include: '#punctuation-comma'}
  type-paren-or-function-parameters:
    begin: \(
    beginCaptures:
      '0': {name: meta.brace.round.js}
    end: \)
    endCaptures:
      '0': {name: meta.brace.round.js}
    name: meta.type.paren.cover.js
    patterns:
    - {include: '#type'}
    - {include: '#function-parameters'}
  type-predicate-operator: {match: '(?<!\.|\$)\bis\b(?!\$|\.)', name: keyword.operator.expression.is.js}
  type-primitive: {match: '(?<!\.|\$)\b(string|number|boolean|symbol|any|void|never)\b(?!\$|\.)',
    name: support.type.primitive.js}
  type-tuple:
    begin: \[
    beginCaptures:
      '0': {name: meta.brace.square.js}
    end: \]
    endCaptures:
      '0': {name: meta.brace.square.js}
    name: meta.type.tuple.js
    patterns:
    - {include: '#type'}
    - {include: '#punctuation-comma'}
  typeof-operator: {match: '(?<!\.|\$)\btypeof\b(?!\$|\.)', name: keyword.operator.expression.typeof.js}
  undefined-literal: {match: '(?<!\.|\$)\bundefined\b(?!\$)', name: constant.language.undefined.js}
  var-expr:
    begin: (?<!\.|\$)(?:(\bexport)\s+)?\b(var|let|const(?!\s+enum\b))\b(?!\$|\.)
    beginCaptures:
      '1': {name: keyword.control.export.js}
      '2': {name: storage.type.js}
    end: (?=$|^|;|}|(\s+(of|in)\s+))
    name: meta.var.expr.js
    patterns:
    - {include: '#destructuring-variable'}
    - {include: '#var-single-variable'}
    - {include: '#variable-initializer'}
    - {include: '#comment'}
    - begin: (,)\s*(?!\S)
      beginCaptures:
        '1': {name: punctuation.separator.comma.js}
      end: (?<!,)((?==|;|}|(\s+(of|in)\s+)|^\s*$))|((?<=\S)(?=\s*$))
      patterns:
      - {include: '#comment'}
      - {include: '#destructuring-variable'}
      - {include: '#var-single-variable'}
      - {include: '#punctuation-comma'}
    - {include: '#punctuation-comma'}
  var-single-variable:
    patterns:
    - begin: "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\n  (=\\s*(\n    ((async\\s+)?(\n\
        \      (function\\s*[(<*]) |\n      (function\\s+) |\n      ([_$[:alpha:]][_$[:alnum:]]*\\\
        s*=>)\n    )) |\n    ((async\\s*)?(\n      ([(]\\s*(([)]\\s*:)|([_$[:alpha:]][_$[:alnum:]]*\\\
        s*:)|(\\.\\.\\.) )) |\n      ([<]\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\\
        s*[^=>])|(\\s*[,]))) |\n      ((<\\s*[_$[:alpha:]\\{\\(]([^<>=]|=[^<]|\\<\\\
        s*[_$[:alpha:]\\{\\(]([^=<>]|=[^<])+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\\
        )(\\s*:\\s*(.)*)?\\s*=>)\n    ))\n  )) |\n  (:\\s*(\n    (<) |\n    ([(]\\\
        s*(\n      ([)]) |\n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n    \
        \    ([:,?=])|\n        ([)]\\s*=>)\n      ))\n    ))\n  ))\n)"
      beginCaptures:
        '1': {name: meta.definition.variable.js entity.name.function.js}
      end: (?=$|^|[;,=}]|(\s+(of|in)\s+))
      name: meta.var-single-variable.expr.js
      patterns:
      - {include: '#var-single-variable-type-annotation'}
    - begin: ([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])
      beginCaptures:
        '1': {name: meta.definition.variable.js variable.other.constant.js}
      end: (?=$|^|[;,=}]|(\s+(of|in)\s+))
      name: meta.var-single-variable.expr.js
      patterns:
      - {include: '#var-single-variable-type-annotation'}
    - begin: ([_$[:alpha:]][_$[:alnum:]]*)
      beginCaptures:
        '1': {name: meta.definition.variable.js variable.other.readwrite.js}
      end: (?=$|^|[;,=}]|(\s+(of|in)\s+))
      name: meta.var-single-variable.expr.js
      patterns:
      - {include: '#var-single-variable-type-annotation'}
  var-single-variable-type-annotation:
    patterns:
    - {include: '#type-annotation'}
    - {include: '#string'}
    - {include: '#comment'}
  variable-initializer:
    patterns:
    - begin: (?<!=|!)(=)(?!=)(?=\s*\S)
      beginCaptures:
        '1': {name: keyword.operator.assignment.js}
      end: (?=$|^|[,);}\]])
      patterns:
      - {include: '#expression'}
    - begin: (?<!=|!)(=)(?!=)
      beginCaptures:
        '1': {name: keyword.operator.assignment.js}
      end: (?=[,);}\]])|(?=^\s*$)|(?<=\S)(?<!=)(?=\s*$)
      patterns:
      - {include: '#expression'}
version: https://github.com/Microsoft/TypeScript-TmLanguage/commit/30d95ebb561fc57e784b43d08f0a6f46ad0c3e5d
